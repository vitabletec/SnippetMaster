{
  "Docker Commands": {
    "prefix": "_docker",
    "body": [
      "docker ps -a | grep geoms",
      "docker logs <containerid>",
      "docker exec -it <containerid> /bin/bash"
    ],
    "description": "Docker commands for container management"
  },
  "Create Docker Image from Dockerfile": {
    "prefix": "_create docker image from Dockerfile",
    "body": [
      "docker build -t your-image-name:tag ."
    ],
    "description": "Create Docker Image from Dockerfile. Build a Docker image with the specified name and tag."
  },
  "Create Docker Image from Container": {
    "prefix": "_create docker image",
    "body": [
      "docker ps",
      "docker commit <container_id_or_name> <image_name>:<tag>"
    ],
    "description": "Create a new Docker image from a running container.<br/>Example:<ol><li> Run 'docker ps' to identify the running containers.</li><li>2. Choose the container ID or name that you want to create an image from.</li><li>3. Replace '<container_id_or_name>' with the chosen ID or name.</li><li>4. Replace '<image_name>:<tag>' with the desired image name and tag.</li><li>   For example, 'docker commit e8c953feacf1 php/webserver5:1.4.1.2'.</li></ol>This command allows you to create a new Docker image based on the current state of a running container. The resulting image will be saved locally and can be used to instantiate new containers with the same configuration and data."
  },
  "Push Docker Image to aws ECR": {
    "prefix": "_push docker image to aws ECR",
    "body": [
      "docker tag <image_name> <aws_account_id>.dkr.ecr.<region>.amazonaws.com/<repository_name>:<tag>",
      "docker push <aws_account_id>.dkr.ecr.<region>.amazonaws.com/<repository_name>:<tag>"
    ],
    "description": "Push your Docker container to AWS Container Registry (ECR).<ol>Example:<li>After creating the Docker image, use 'docker tag' to assign the ECR repository URI to the image.</li><li>   For example, 'docker tag php/webserver5.6:1.0.0.0 11098765432.dkr.ecr.us-east-2.amazonaws.com/php/webserver5.6:1.0.0.0'.</li><li> Run 'docker push' to upload the image to your AWS ECR repository.</li><li>   For example, 'docker push 11098765432.dkr.ecr.us-east-2.amazonaws.com/php/webserver5.6:1.0.0.0'.</li></ol>This command sequence allows you to push your locally created Docker image to the AWS ECR repository, making it available for use in AWS services such as ECS, EKS, or Elastic Beanstalk."
  },
  "Share Docker Image Locally": {
    "prefix": "_share image",
    "body": ["docker save -o <output_file.tar> <image_name>:<tag>"],
    "description": "Share the Docker image without pushing to AWS ECR.<ol>Example:<li>1. Save the Docker image as a file using 'docker save' command.</li><li>   For example, 'docker save -o webserver5.6.tar php/webserver5:1.4.1.2'.</li><li>2. Share the saved image file (webserver5.6.tar) with the recipient using a suitable file-sharing method.</li><ol>This command allows you to save the Docker image as a file locally, which you can then share with others without pushing it to the AWS ECR registry."
  },
  "Load Docker Image from Local File": {
    "prefix": "_load image",
    "body": ["docker load -i <input_file.tar>"],
    "description": "Import or pull the Docker image from the local system.<ol>Example:</li><li>1. Load the Docker image from the saved file using 'docker load' command.</li><li>   For example, 'docker load -i webserver5.6.tar'.<ol>This command allows you to import or pull a Docker image from a locally saved file (e.g., after receiving it from someone who shared it without pushing it to the AWS ECR registry)."
  },
  "Docker Run with Your Project Name and Image": {
    "prefix": "_docker_run_project",
    "body": "docker run -it --name REPLACE_WITH_YOUR_PROJECT_NAME PASTE_YOUR_IMAGE_NAME",
    "description": "Run a Docker container with your project name and image."
  },

  "Docker Pull CentOS Image": {
    "prefix": "_docker_pull_centos",
    "body": "docker pull centos",
    "description": "Pull the latest CentOS image from Docker Hub."
  },

  "Docker Run CentOS Container": {
    "prefix": "_docker_run_centos",
    "body": "docker run -it --name mycentos centos",
    "description": "Run an interactive CentOS container named 'mycentos'."
  },
  "Docker Login": {
    "prefix": "_docker_login",
    "body": "docker login",
    "description": "Log in to Docker Hub. You will be prompted to enter your Docker Hub username, password, and, if enabled, two-factor authentication code."
  },
  "Docker Run Container": {
    "prefix": "_docker_run_container",
    "body": "docker run -d -p host_port:container_port image_name:tag",
    "description": "Run a Docker container in detached mode with port mapping."
  },
  "Docker List Containers": {
    "prefix": "_docker_list_containers",
    "body": "docker ps",
    "description": "List running Docker containers."
  },
  "Docker List All Containers": {
    "prefix": "_docker_list_all_containers",
    "body": "docker ps -a",
    "description": "List all Docker containers, including stopped ones."
  },
  "Docker Stop Container": {
    "prefix": "_docker_stop_container",
    "body": "docker stop container_id",
    "description": "Stop a running Docker container."
  },
  "Docker Remove Container": {
    "prefix": "_docker_remove_container",
    "body": "docker rm container_id",
    "description": "Remove a Docker container."
  },
  "Docker Remove Image": {
    "prefix": "_docker_remove_image",
    "body": "docker rmi image_id",
    "description": "Remove a Docker image."
  },
  "Docker List Images": {
    "prefix": "_docker_list_images",
    "body": "docker images",
    "description": "List Docker images."
  },
  "Docker Pull Image": {
    "prefix": "_docker_pull_image",
    "body": "docker pull image_name:tag",
    "description": "Pull a Docker image from Docker Hub."
  },
  "Docker Tag Image": {
    "prefix": "_docker_tag_image",
    "body": "docker tag source_image:source_tag new_image:tag",
    "description": "Tag a Docker image with a new name and/or tag."
  },
  "Docker Create Volume": {
    "prefix": "_docker_create_volume",
    "body": "docker volume create volume_name",
    "description": "Create a Docker volume."
  },
  "Docker List Volumes": {
    "prefix": "_docker_list_volumes",
    "body": "docker volume ls",
    "description": "List Docker volumes."
  },
  "Docker List Networks": {
    "prefix": "_docker_list_networks",
    "body": "docker network ls",
    "description": "List Docker networks."
  },
  "Docker Compose Up": {
    "prefix": "_docker_compose_up",
    "body": "docker-compose up -d",
    "description": "Run containers defined in a Docker Compose file."
  },
  "Docker Compose Down": {
    "prefix": "_docker_compose_down",
    "body": "docker-compose down",
    "description": "Stop and remove containers defined in a Docker Compose file."
  },
  "Docker Compose Build": {
    "prefix": "_docker_compose_build",
    "body": "docker-compose build",
    "description": "Build or rebuild services defined in a Docker Compose file."
  },
  "Docker Compose Logs": {
    "prefix": "_docker_compose_logs",
    "body": "docker-compose logs service_name",
    "description": "View logs for a specific service in a Docker Compose file."
  },
  "Docker Compose Scale": {
    "prefix": "_docker_compose_scale",
    "body": "docker-compose up -d --scale service_name=2",
    "description": "Scale services (replicas) defined in a Docker Compose file."
  },
  "Docker Inspect Container": {
    "prefix": "_docker_inspect_container",
    "body": "docker inspect container_id",
    "description": "Inspect details of a Docker container."
  },
  "Docker Inspect Image": {
    "prefix": "_docker_inspect_image",
    "body": "docker inspect image_id",
    "description": "Inspect details of a Docker image."
  },
  "Create Docker Network": {
    "prefix": "_create docker network",
    "body": [
      "docker network create your-network-name"
    ],
    "description": "Create Docker Network. Create a Docker network with the specified name."
  },
  "List Docker Networks": {
    "prefix": "_list docker networks",
    "body": [
      "docker network ls"
    ],
    "description": "List Docker Networks. List all Docker networks on the system."
  },
  "Inspect Docker Network": {
    "prefix": "_inspect docker network",
    "body": [
      "docker network inspect your-network-name"
    ],
    "description": "Inspect Docker Network. Display detailed information about a Docker network."
  },
  "Remove Docker Network": {
    "prefix": "_remove docker network",
    "body": [
      "docker network rm your-network-name"
    ],
    "description": "Remove Docker Network. Remove a Docker network with the specified name."
  },
  "Create Container with Specific Network": {
    "prefix": "_create container with network",
    "body": [
      "docker run --network=your-network-name -d your-image"
    ],
    "description": "Create Container with Specific Network. Run a Docker container with the specified network."
  },
  "Connect Container to Network": {
    "prefix": "_connect container to network",
    "body": [
      "docker network connect your-network-name your-container"
    ],
    "description": "Connect Container to Network. Connect a running Docker container to a network."
  },
  "Disconnect Container from Network": {
    "prefix": "_disconnect container from network",
    "body": [
      "docker network disconnect your-network-name your-container"
    ],
    "description": "Disconnect Container from Network. Disconnect a Docker container from a network."
  },
  "Show Container Network Connectivity": {
    "prefix": "_show container network connectivity",
    "body": [
      "docker network inspect -f '{{json .NetworkSettings.Networks}}' your-container"
    ],
    "description": "Show Container Network Connectivity. Display network information for a Docker container."
  },
  "Create User-Defined Bridge Network": {
    "prefix": "_create user-defined bridge network",
    "body": [
      "docker network create --driver bridge your-bridge-network"
    ],
    "description": "Create User-Defined Bridge Network. Create a user-defined bridge network for Docker containers."
  },
  "Create Overlay Network for Swarm": {
    "prefix": "_create overlay network for swarm",
    "body": [
      "docker network create --driver overlay your-overlay-network"
    ],
    "description": "Create Overlay Network for Swarm. Create an overlay network for Docker Swarm services."
  }
}
