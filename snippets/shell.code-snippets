{
  "grep": {
    "prefix": "_grep",
    "body": [
      "grep -nr \"search_term\" . --exclude-dir={.git,build,ci,config,www} --color"
    ],
    "description": "Search for a term in the current directory, excluding certain directories"
  },
  "Export MySQL table schema": {
    "prefix": "_export_mysql_schema",
    "body": [
      "mysqldump -uusername -ppassword --no-data databasename table1 table2 table3 > path/filename.sql"
    ],
    "description": "Export the schema for specified MySQL tables to a .sql file"
  },
  "Import data into a table": {
    "prefix": "_import_data",
    "body": ["mysql -u username -p databasename < path/example.sql"],
    "description": "This will execute the mysql command with the -u flag for the username, -p flag for the password prompt, and the name of the database. The < symbol is used to redirect the contents of the .sql file to the mysql command, which will import the data into the specified database."
  },
  "Import data into a database": {
    "prefix": "_import_db",
    "body": [
      "gunzip < impordb_filename.gz | mysql -uREPLACE_DB_USERNAME -pREPLACE_DB_PASSWORD dbname"
    ],
    "description": "Imports data from a compressed file into a MySQL database."
  },
  "Export data from a database": {
    "prefix": "_export_db",
    "body": [
      "mysqldump -uREPLACE_DB_USERNAME -pREPLACE_DB_PASSWORD DB_NAME | gzip > EXPORT_FILENAME.gz"
    ],
    "description": "Exports data from a MySQL database and compresses it into a gzip file."
  },
  "Export database schema without data": {
    "prefix": "_export_db_schema",
    "body": [
      "mysqldump -uREPLACE_DB_USERNAME -pREPLACE_DB_PASSWORD --no-data DB_NAME > EXPORT_FILENAME.gz"
    ],
    "description": "Exports the schema of a MySQL database without data."
  },
  "Find sudo user in /etc/group": {
    "prefix": "_find_sudo_user",
    "body": ["grep -Po '^sudo.+:\\K.*$' /etc/group"],
    "description": "Displays the list of users with sudo privileges from the /etc/group file"
  },
  "Show directory size": {
    "prefix": "_dir_size",
    "body": ["du -h --max-depth=1", ""],
    "description": "Displays the size of the current directory and its contents in human-readable format"
  },
  "Count files in each directory": {
    "prefix": "_count_files",
    "body": [
      "find . -printf \"%h\\n\" | cut -d/ -f-2 | sort | uniq -c | sort -rn"
    ],
    "description": "Recursively counts the number of files in each directory."
  },
  "List files with .rej extension": {
    "prefix": "_list_specific_files",
    "body": ["find . -type f -name '*.specific' -printf '%TY-%Tm-%Td %TT %p\\n' | sort"],
    "description": "Lists files with the extension .specific and their modification times."
  },
  "Mount remote directory via SSHFS": {
    "prefix": "_mount_sshfs",
    "body": ["sshfs username@server_address.com:/home/username/ /home/php/mounted_projects/yourlocaldirname/ -o reconnect,ServerAliveInterval=15,ServerAliveCountMax=3"],
    "description": "Mounts a remote directory via SSHFS."
  },
  "Kill process in Linux": {
    "prefix": "_kill_process_linux",
    "body": ["sudo kill -9 sudo lsof -t -i:3000"],
    "description": "Kills a process running on port 3000 in Linux."
  },

  "Display files with permissions": {
    "prefix": "_display_files_permissions",
    "body": ["stat -c '%a - %n' directory/*"],
    "description": "Displays the permissions of files in a directory in Linux."
  },

  "Edit file without vim": {
    "prefix": "_edit_file_no_vim",
    "body": [
      "sed -i '/SSLCertificateFile.*snakeoil.pem/cSSLCertificateFile /etc/ssl/certs/mycert.crt' /etc/apache2/sites-available/default-ssl.conf"
    ],
    "description": "Edits a file without using vim in Linux."
  },

  "Create zip file in Linux": {
    "prefix": "_create_zip_linux",
    "body": ["zip -r filename.zip directory_name"],
    "description": "Creates a zip file of a directory in Linux."
  },

  "Clone website with wget": {
    "prefix": "_clone_website_wget",
    "body": [
      "wget --mirror --convert-links --adjust-extension --page-requisites --no-parent --no-host-directories --execute robots=off --waitretry=10 --retry-connrefused --recursive --level=inf --no-clobber --no-check-certificate --output-file=wget.log <website_url>"
    ],
    "description": "Clones a website with all connected pages and creates a log file using wget in Linux."
  },

  "Import data into table": {
    "prefix": "_import_data_table",
    "body": ["mysql -u username -p databasename < path/example.sql"],
    "description": "Imports data from a SQL file into a database table in Linux."
  },
  "Update apt": {
    "prefix": "_update_apt",
    "body": ["sudo apt-get update"],
    "description": "Updates the apt package manager."
  },
  "Install Apache": {
    "prefix": "_install_apache",
    "body": ["sudo apt-get install apache2"],
    "description": "Installs the Apache web server."
  },
  "Install PHP": {
    "prefix": "_install_php",
    "body": ["sudo apt-get install php libapache2-mod-php"],
    "description": "Installs PHP and the PHP module for Apache."
  },
  "Restart Apache": {
    "prefix": "_restart_apache",
    "body": ["sudo systemctl restart apache2"],
    "description": "Restarts the Apache web server."
  },
  "Install MySQL": {
    "prefix": "_install_mysql",
    "body": ["sudo apt-get install mysql-server"],
    "description": "Installs the MySQL database server."
  },
  "Install phpMyAdmin": {
    "prefix": "_install_phpmyadmin",
    "body": [
      "sudo apt-get install phpmyadmin php-mbstring php-gettext",
      "# If any error found link php-gettext not found, run the following command:",
      "# sudo apt update && sudo apt install phpmyadmin php-mbstring",
      "know more : https://github.com/msrajawat298/msrajawat298/blob/main/aws-ec2-learning/aws-configration.txt"
    ],
    "description": "Installs phpMyAdmin and its dependencies."
  },
  "SFTP Template": {
    "prefix": "_sftp",
    "body": [
      "{",
      "\t\"name\": \"${1:domain}\",",
      "\t\"host\": \"${1:domain}.sftp.wpengine.com\",",
      "\t\"protocol\": \"sftp\",",
      "\t\"port\": 2222,",
      "\t\"username\": \"${1:domain}-${2:user}\",",
      "\t\"password\": \"$0\",",
      "\t\"remotePath\": \"/\",",
      "\t\"uploadOnSave\": true,",
      "\t\"watcher\": {",
      "\t\t\"files\": \"**/*.{css,js,ts,scss,php,html,json}\",",
      "\t\t\"autoUpload\": false,",
      "\t\t\"autoDelete\": false",
      "\t},",
      "\t\"ignore\": [",
      "\t\t\".vscode\",",
      "\t\t\".git\",",
      "\t\t\".DS_Store\",",
      "\t\t\"node_modules/\"",
      "\t]",
      "}"
    ],
    "description": "This is a configuration object for a VSCode extension called \"SFTP\" (which stands for Secure File Transfer Protocol). It allows you to upload and download files to and from a remote server via SFTP, as well as synchronize changes between the local and remote files automatically. To use this configuration, you need to have the SFTP extension installed in your VSCode. Once you have it installed, you can create a new configuration file with this object and modify the values to match your own server details, such as \"host\", \"username\", \"password\", and \"remotePath\". You can then save the configuration file and use the SFTP extension to upload and synchronize files between your local machine and the remote server. Note that some of the values in this configuration file, such as the \"password\", should not be shared with others and should be kept secure."
  },
  "Update SSH Config": {
    "prefix": "_update_ssh_config",
    "body": [
      "sudo vi /etc/ssh/ssh_config",
      "Add these two lines at the end",
      "HostkeyAlgorithms +ssh-rsa",
      "PubkeyAcceptedAlgorithms +ssh-rsa"
    ],
    "description": "If your facing the issue to connect ssh in cmd line, its because of your system is older. For fix this issue you just need to Update SSH configuration with ssh-rsa algorithms. Update SSH configuration with ssh-rsa algorithms: Use this code snippet to add the HostkeyAlgorithms +ssh-rsa and PubkeyAcceptedAlgorithms +ssh-rsa lines at the end of the ssh_config file. This allows compatibility with older systems that require the ssh-rsa algorithm for key exchange and authentication."
  },
  "Tail Logs": {
    "prefix": "_tail logs",
    "body": [
      "sudo tail -f /var/log/messages /var/log/pictometry-logger.log /var/log/httpd/error_log /var/log/httpd/ssl_error_log"
    ],
    "description": "Tail multiple log files. It will run the sudo tail -f command for the four specified log files, allowing you to monitor them in real-time."
  },
  "Fix SSL Certificates Issue": {
    "prefix": "_fix ssl",
    "body": [
      "cd /etc/pki/tls/certs",
      "Run this cmd -> sudo curl https://curl.se/ca/cacert.pem -o ca-bundle.crt -k"
    ],
    "description": "Fix SSL certificates issue."
  },
  "Enable Apache Module": {
    "prefix": "_enable apache module",
    "body": ["sudo a2enmod TYPE_YOUR_MOUDLE_NAME"],
    "description": "Enable Apache module. To enable Apache modules on your Ubuntu system, you can use the a2enmod command followed by the name of the module. For example, to enable the php5.6 module, you can run: sudo a2enmod php5.6. Similarly, to enable the authnz_ldap and authz_core modules, you can run: <ul><li>sudo a2enmod authnz_ldap </li><li> sudo a2enmod authz_core </li><li> sudo a2enmod fcgid</li></ul>"
  },
  "Check Apache Configuration": {
    "prefix": "_check apache",
    "body": ["sudo apachectl configtest"],
    "description": "Check Apache configuration for syntax errors"
  },
  "Restart Apache Server": {
    "prefix": "_restart apache",
    "body": ["sudo systemctl restart apache2"],
    "description": "Restart Apache server"
  },
  "SCP with ssh-dss": {
    "prefix": "_scp ssh-dss",
    "body": ["sudo scp -oHostKeyAlgorithms=+ssh-dss <source> <destination>"],
    "description": "Copy files using scp with ssh-dss key algorithm"
  },
  "Create Symbolic Link for Apache": {
    "prefix": "_apache symlink",
    "body": ["sudo ln -s /etc/apache2/conf.d /etc/apache2/sites-enabled/"],
    "description": "Create a symbolic link between /etc/apache2/conf.d and /etc/apache2/sites-enabled"
  },
  "Mount Remote Directory in Linux": {
    "prefix": "_mount_remote_directory",
    "body": [
      "sudo mount serverIP_OR_DOMAIN_NAME:/share/path/ /mnt/local/directory/path/"
    ],
    "description": "Mount a remote directory from a server to a local mount point in Linux"
  },
  "Yum List (First 10 Packages)": {
    "prefix": "_yum_list",
    "body": "yum list | head -n 10",
    "description": "Display the first 10 packages available in the Yum package manager."
  },
  "Disk Space Usage": {
    "prefix": "_disk_space_usage",
    "body": "df -h",
    "description": "Display disk space usage of all mounted filesystems in a human-readable format."
  },
  "List Block Devices": {
    "prefix": "_lsblk",
    "body": "lsblk",
    "description": "List information about all available block devices (disks) connected to the system."
  },
  "Resize Filesystem": {
    "prefix": "_resize_filesystem",
    "body": "sudo resize2fs /dev/xvda1",
    "description": "Resize the filesystem on the specified device (/dev/xvda1 in this example) after resizing the underlying partition."
  },
  "Replace Text in File with sed": {
    "prefix": "_sed_replace_text",
    "body": "sed -i 's/old_text/new_text/g' your_file_name",
    "description": "Replace 'old_text' with 'new_text' in the specified 'your_file_name' using sed."
  },
  "Yum Search for Python27-pip Package": {
    "prefix": "_yum_search_python27-pip",
    "body": "yum search python27-pip",
    "description": "Search for the 'python27-pip' package using Yum package manager."
  },
  "Install VSCE": {
    "prefix": "_install_vsce",
    "body": "npm install -g @vscode/vsce",
    "description": "Install VS Code Extension Manager (VSCE) globally using Node.js package manager (npm)."
  },
  "Package VS Code Extension": {
    "prefix": "_package_extension",
    "body": "vsce package",
    "description": "Package the VS Code extension into a .vsix file for publishing."
  },
  "Publish VS Code Extension with Token": {
    "prefix": "_publish_extension_token",
    "body": "vsce publish -p VSCE_TOKEN",
    "description": "Publish the VS Code extension to the VS Code Marketplace using a Personal Access Token (VSCE_TOKEN). <br/> <a href='https://learn.microsoft.com/en-in/azure/devops/organizations/accounts/create-organization?view=azure-devops' target='_blank'> Reference Link </a>"
  },
  "Create User in Ubuntu": {
    "prefix": "_adduser",
    "body": ["adduser <type username>"],
    "description": "Create a new user in Ubuntu"
  },
  "Check if User is Created": {
    "prefix": "_checkuser",
    "body": ["id <type username> OR grep <type username> /etc/passwd"],
    "description": "Check if a user is created in Ubuntu"
  },
  "Get Public IP Address": {
    "prefix": "_public_ip",
    "body": ["curl ifconfig.me"],
    "description": "Get the Public IP Address"
  },
  "Get Local IP Address": {
    "prefix": "_local_ip",
    "body": ["hostname -I"],
    "description": "Get the Local IP Address"
  },
  "Create sftp User and Config": {
    "prefix": "_create_sftp_user",
    "body": [
      "// Step 1: Create SFTP user 'sftuser' with nologin shell",
      "sudo useradd -s /sbin/nologin sftuser",
      
      "// Step 2: Verify user creation",
      "id sftuser",
      
      "// Step 3: Set password for 'sftuser'",
      "sudo passwd sftuser",
      
      "// Step 4: Switch to 'sftuser' account",
      "sudo su - sftuser",
      
      "// Step 5: Edit 'sshd_config' using 'vi'",
      "sudo vi /etc/ssh/sshd_config",
      
      "// Step 6: Inside 'vi', press '\\' and type 'Subsystem' to search",
      "// Step 7: Press 'I' to enable insert mode and add the following lines:",
      "// Match User sftuser",
      "//    ForceCommand internal-SFTP",
      "//    ChrootDirectory /var/www/",
      "//    AllowTcpForwarding no",
      "//    X11Forwarding no",
      "// Step 8: Press 'Esc' to exit insert mode",
      "// Step 9: Save and exit 'vi' by typing ':wq' and pressing Enter",
      
      "// Step 10: Restart the SSH service to apply changes",
      "sudo service sshd restart"
    ],
    "description": "Create SFTP user and enable SFTP Chroot - Step-by-step guide"
  },
  "System Information": {
    "prefix": "_sys_info",
    "body": [
      "// Get OS type",
      "uname -s",
      
      "// Get OS version",
      "uname -r",
      
      "// Get OS flavor",
      "lsb_release -a 2>/dev/null || cat /etc/*-release 2>/dev/null | head -n1 || echo 'Unknown'",
      
      "// Get machine architecture",
      "uname -m",
      
      "// Get kernel version",
      "uname -v"
    ],
    "description": "Get comprehensive system information"
  }
}
